	public void actionPerformed(ActionEvent e) {

				//V A L I D A T I O N 
				if (listModel.getSize() + 1 > 2) {
					if ((humanButton.isSelected()) && (listModel.getSize() + 1 > 2)) {
						Toolkit.getDefaultToolkit().beep();
						JOptionPane.showMessageDialog(null, "You can have only 2 players in \"human\" mode!", "Memory",
								JOptionPane.INFORMATION_MESSAGE);
						playerNameTextField.setText("");
						return;
					} else if (((soloButton.isSelected()) || (computerButton.isSelected()))
							&& (listModel.getSize() + 1 > 1)) {
						Toolkit.getDefaultToolkit().beep();
						JOptionPane.showMessageDialog(null,
								"You can have only 1 player in \"solo\" or  \"computer\" mode!", "Memory",
								JOptionPane.INFORMATION_MESSAGE);
						playerNameTextField.setText("");
						playerNameTextField.requestFocusInWindow();
						return;
					}
					Toolkit.getDefaultToolkit().beep();
					JOptionPane.showMessageDialog(null, "You can't register more than 2 players!", "Memory",
							JOptionPane.INFORMATION_MESSAGE);
					playerNameTextField.setText("");
					playerNameTextField.requestFocusInWindow();
					return;
				}

				name = playerNameTextField.getText();

				// User didn't type in a unique name...
				if (name.equals("") || listModel.contains(name)) {
					Toolkit.getDefaultToolkit().beep();
					JOptionPane.showMessageDialog(null, "The name already exists,  please choose another name",
							"Memory", JOptionPane.INFORMATION_MESSAGE);

					playerNameTextField.requestFocusInWindow();
					playerNameTextField.selectAll();
					return;
				}

				int index = list.getSelectedIndex();
				if (index == -1) {
					index = 0;
				} else {
					index++;
				}

				listModel.insertElementAt(playerNameTextField.getText(), index);
				list.clearSelection();

				playerNameTextField.requestFocusInWindow();
				playerNameTextField.setText("");

				list.setSelectedIndex(index);
				list.ensureIndexIsVisible(index);
			}

			// Required by DocumentListener.
			public void insertUpdate(DocumentEvent e) {
				enableButton();
			}

			// Required by DocumentListener.
			public void removeUpdate(DocumentEvent e) {
				handleEmptyTextField(e);
			}

			// Required by DocumentListener.
			public void changedUpdate(DocumentEvent e) {
				if (!handleEmptyTextField(e)) {
					enableButton();
				}
			}

			private void enableButton() {
				if (!alreadyEnabled) {
					addButton.setEnabled(true);
				}
			}

			private boolean handleEmptyTextField(DocumentEvent e) {
				if (e.getDocument().getLength() <= 0) {
					addButton.setEnabled(false);
					alreadyEnabled = false;
					return true;
				}
				return false;
			}
		}